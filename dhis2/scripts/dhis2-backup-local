#!/usr/bin/env bash
#########################################################
# postgres backup script v1.2
# author: Alex Tumwesigye (Original work by Bob Jolliffe)
# licence: public domain 
#
# using some ideas from 
# http://wiki.postgresql.org/wiki/Automated_Backup_on_Linux
#########################################################
set -e
#export $(xargs -0 -a "/proc/1/environ")

export $(grep -v '^#' /etc/profile.d/db_backup_env.sh | xargs -d '\n')

export DB_BACKUP_DIR="${DB_BACKUP_DIR:-/dbbackups/}"
export DB_USER="${DB_USER:-postgres}"
export DB_NAME="${DB_NAME:-dhis}"
export DB_DAY_OF_WEEK_TO_KEEP="${DB_DAY_OF_WEEK_TO_KEEP:-7}"
export DB_WEEKS_TO_KEEP="${DB_WEEKS_TO_KEEP:-6}"
export DB_DAYS_TO_KEEP="${DB_DAYS_TO_KEEP:-7}"

#printenv | sed 's/^\(.*\)$/export \1/g' >> /etc/profile.d/db_backup_env.sh

EXCLUDED="-T aggregated* -T analytics* -T completeness*"

function perform_backups()
{
  SUFFIX=$1
  FINAL_DB_BACKUP_DIR=${DB_BACKUP_DIR}/backup"`date +\%Y-\%m-\%d-\%H-\%M`$SUFFIX/"
  
  if ! mkdir -p $FINAL_DB_BACKUP_DIR; then
        echo "`date` Cannot create backup directory in $FINAL_DB_BACKUP_DIR. Go and fix it!"
        exit 1;
  fi;

  if ! pg_dump -U ${DB_USER} -O -Fp ${DB_NAME} $EXCLUDED | gzip > $FINAL_DB_BACKUP_DIR"${DB_NAME}".sql.gz.in_progress; then
      echo "`date` [!!ERROR!!] Failed to produce plain backup of database $DB_NAME"
  else
    mv $FINAL_DB_BACKUP_DIR"${DB_NAME}".sql.gz.in_progress $FINAL_DB_BACKUP_DIR"${DB_NAME}".sql.gz
    # sync to remote server
    # rsync -avq $DB_BACKUP_DIR $REMOTE
  fi
}

# MONTHLY BACKUPS
DAY_OF_MONTH=`date +%d`
 
if [ $DAY_OF_MONTH = "01" ];
then
	# Delete all expired monthly directories
	# find $DB_BACKUP_DIR -maxdepth 1 -name "*-monthly" -exec rm -rf '{}' ';'
 
	perform_backups "-monthly"
 
	exit 0;
fi
 
# WEEKLY BACKUPS
DAY_OF_WEEK=`date +%u` #1-7 (Monday-Sunday)
EXPIRED_DAYS=`expr $(((${DB_WEEKS_TO_KEEP} * 7) + 1))`
 
if [ ${DAY_OF_WEEK} = ${DB_DAY_OF_WEEK_TO_KEEP} ];
then
	# Delete all expired weekly directories
	find ${DB_BACKUP_DIR} -maxdepth 1 -mtime +$EXPIRED_DAYS -name "*-weekly" -exec rm -rf '{}' ';'
 
	perform_backups "-weekly"
 
	exit 0;
fi

# Delete daily backups 7 days old or more
find ${DB_BACKUP_DIR} -maxdepth 1 -mtime +${DB_DAYS_TO_KEEP} -name "*-daily" -exec rm -rf '{}' ';'
 
perform_backups "-daily"


